package com.apppro.pikturesque.Utils;

import android.content.Context;
import android.graphics.Bitmap;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ProgressBar;

import com.apppro.pikturesque.R;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;

import java.util.ArrayList;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

/* This is my array adapter class. This class can be called whenever an array list of images in a grid
* is needed, like on user profile activities.*/
public class GridImageAdapter extends ArrayAdapter<String> {
    private Context context;
    private LayoutInflater inflater;
    private int layoutResource;
    private String append;
    private ArrayList<String> imgURL;


//Necessary constructor for this class.
    public GridImageAdapter(Context context, int layoutResource, String append, ArrayList<String> imgURL) {

       //The super is necessary becase I'm going to be referencing items from the array list, by these identifiers.
        super (context, layoutResource, imgURL);
        this.inflater = (LayoutInflater) context.getSystemService(context.LAYOUT_INFLATER_SERVICE);

        //these were autogenerated.
        this.context = context;
        this.layoutResource = layoutResource;
        this.append = append;
        this.imgURL = imgURL;
    }

    private static class ViewHolder {
        SquareImageView picture;
        ProgressBar progressBar;
    }

    //has a pretty similar function to a recycler view.
    @NonNull
    @Override
    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {

        final ViewHolder viewHolder;
        // This is the viewholder build pattern. Again, is's pretty similar to recycler view.
            if (convertView==null){
                convertView=inflater.inflate(layoutResource, parent, false);
                viewHolder = new ViewHolder();

         //The next two lines will adapt the images to be used in the grid view, and a progressbar for when they're loading.
                viewHolder.picture=convertView.findViewById(R.id.gridImageView);
                viewHolder.progressBar=convertView.findViewById(R.id.gridImageProgressBar);

                /*Stores widgets in memory; all the widgets are stored in ViewHolder, ViewHolder = viewHolder
                * and viewHolder gets stored in memory.*/
                convertView.setTag(viewHolder);
            }

            else
            {viewHolder= (ViewHolder) convertView.getTag();}

            /*this is what the super up there is for. if it wasn't there, I'd still be able to call get item,
            * but position would return null every time, because it would not pull that position from the array list I have..*/
            String imgURL = getItem(position);

        ImageLoader imageLoader =ImageLoader.getInstance();
        imageLoader.displayImage(append + imgURL, viewHolder.picture, new ImageLoadingListener() {

            /*The image will display, but while loading there will be an ImageLoadingListener.
             * When the image starts to load, the progress bar will show.
             * When it stops loading, for whatever reason, the progress bar will stop showing.*/
            @Override
            public void onLoadingStarted(String imageUri, View view) {
                if(viewHolder.progressBar!=null)
                    viewHolder.progressBar.setVisibility(View.VISIBLE);
            }

            @Override
            public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
                if(viewHolder.progressBar!=null)
                   viewHolder.progressBar.setVisibility(View.GONE);
            }

            @Override
            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                if(viewHolder.progressBar!=null)
                   viewHolder.progressBar.setVisibility(View.GONE);
            }

            @Override
            public void onLoadingCancelled(String imageUri, View view) {
                if(viewHolder.progressBar!=null)
                   viewHolder.progressBar.setVisibility(View.GONE);
            }
        });

        return convertView;
    }
}
